services:
  mariadb:
    container_name: mariadb
    image: mariadb
    restart: always
    environment:
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_USER_PWD=${DB_USER_PWD}
      - DB_ROOT_USER=${DB_ROOT_USER}
      - DB_ROOT_PWD=${DB_ROOT_PWD}
    build:
      context: ./requirements/mariadb
      dockerfile: Dockerfile
    volumes:
      - wordpress_db:/var/lib/mysql
    networks:
      - inception

  wordpress:
    container_name: wordpress
    image: wordpress
    restart: always
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_USER_PWD=${DB_USER_PWD}
      - DB_HOST=${DB_HOST}
      - WP_TITLE=${WP_TITLE}
      - WP_ADMIN_USER=${WP_ADMIN_USER}
      - WP_ADMIN_PWD=${WP_ADMIN_PWD}
      - WP_ADMIN_EMAIL=${WP_ADMIN_EMAIL}
      - WP_USER=${WP_USER}
      - WP_USER_PWD=${WP_USER_PWD}
      - WP_USER_EMAIL=${WP_USER_EMAIL}
    build:
      context: ./requirements/wordpress
      dockerfile: Dockerfile
    depends_on:
      - mariadb
    volumes:
      - wordpress_files:/var/www/html
    networks:
      - inception

  nginx:
    container_name: nginx
    image: nginx
    restart: always
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME}
    build:
      context: ./requirements/nginx
      dockerfile: Dockerfile
    depends_on:
      - wordpress
      - mariadb
    ports:
      - "443:443"
    volumes:
      - wordpress_files:/var/www/html:ro # Nginx just needs read-only access to WordPress files
    networks:
      - inception
  
volumes:
  wordpress_files:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${HOME}/data/wordpress

  wordpress_db:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${HOME}/data/mariadb

networks:
  inception:
    name: inception
    driver: bridge

